{"version":3,"sources":["webpack:///./src/app/shared/services/modal-popup.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA2C;AACW;AAC8B;AAKpF;IAEI,2BAAoB,YAAsB;QAAtB,iBAAY,GAAZ,YAAY,CAAU;IAAI,CAAC;IAC/C;;;;;;;OAOG;IACI,kDAAsB,GAA7B,UAA8B,UAAe,EAAE,QAAa,EAAE,IAAS,EAAE,MAAc,EAAE,OAAY,EAAE,OAAO;QAC1G,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;SACvB;QACD,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG;gBACR,OAAO,EAAG,MAAM;gBAChB,SAAS,EAAG,QAAQ;aACrB,CAAC;SACH;QACD,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iGAAmB,EAAE,IAAI,CAAC,CAAC;QACnE,QAAQ,CAAC,iBAAiB,CAAC,IAAI,GAAG,eAAe,CAAC;QAClD,QAAQ,CAAC,iBAAiB,CAAC,WAAW,GAAG,MAAM,CAAC;QAChD,QAAQ,CAAC,iBAAiB,CAAC,eAAe,GAAG,UAAU,CAAC;QACxD,QAAQ,CAAC,iBAAiB,CAAC,SAAS,GAAG,QAAQ,CAAC;QAChD,QAAQ,CAAC,iBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;QAC7C,OAAO,QAAQ,CAAC,iBAAiB,CAAC,aAAa,CAAC;QAChD;;cAEM;IACV,CAAC;IAED;;;;;;OAMG;IACI,iDAAqB,GAA5B,UAA6B,MAAc,EAAE,OAAe,EAAE,IAAS,EAAE,OAAY,EAAE,OAAY;QACjG,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;SACvB;QACD,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG;gBACR,OAAO,EAAG,KAAK;gBACf,SAAS,EAAG,IAAI;aACjB,CAAC;SACH;QACD,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iGAAmB,EAAE,IAAI,CAAC,CAAC;QACnE,QAAQ,CAAC,iBAAiB,CAAC,IAAI,GAAG,SAAS,CAAC;QAC5C,QAAQ,CAAC,iBAAiB,CAAC,WAAW,GAAG,MAAM,CAAC;QAChD,QAAQ,CAAC,iBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;QAC7C,QAAQ,CAAC,iBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;QAC7C,OAAO,QAAQ,CAAC,iBAAiB,CAAC,aAAa,CAAC;QAChD;;cAEM;IACV,CAAC;IA3DU,iBAAiB;QAH7B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAGoC,mEAAQ;OAFjC,iBAAiB,CA4D7B;IAAD,wBAAC;CAAA;AA5D6B","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ModalPopupComponent } from '@app/widget/modal-popup/modal-popup.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModalPopupService {\r\n    buttons: any;\r\n    constructor(private modalService: NgbModal) { }\r\n    /**\r\n     * @param formConfig - Form configuration\r\n     * @param formData - data to be bind in the form\r\n     * @param prop - bootstrap pop properties(size etc..)\r\n     * @param header - popup header name\r\n     * @param buttons - Footerbuttons\r\n     * @param methods - Footer button methods\r\n     */\r\n    public openModalPopupWithForm(formConfig: any, formData: any, prop: any, header: string, buttons: any, methods) {\r\n        if (!prop) {\r\n          prop = { size: 'md' };\r\n        }\r\n        if (!buttons) {\r\n          buttons = {\r\n            primary : 'Save',\r\n            secondary : 'Cancel'\r\n          };\r\n        }\r\n        const modalRef = this.modalService.open(ModalPopupComponent, prop);\r\n        modalRef.componentInstance.type = 'modalwithform';\r\n        modalRef.componentInstance.modalheader = header;\r\n        modalRef.componentInstance.modalformConfig = formConfig;\r\n        modalRef.componentInstance.modaldata = formData;\r\n        modalRef.componentInstance.buttons = buttons;\r\n        return modalRef.componentInstance.saveModalData;\r\n        /* modalRef.componentInstance.saveModalData.subscribe((receivedData: any) => {\r\n          methods.save(receivedData);\r\n        }); */\r\n    }\r\n\r\n    /**\r\n     * @param header - confirmation popup header\r\n     * @param message - confirmation popup message\r\n     * @param prop - popup style\r\n     * @param buttons - buttons\r\n     * @param methods - button action methods\r\n     */\r\n    public openConfirmationModal(header: string, message: string, prop: any, buttons: any, methods: any) {\r\n      if (!prop) {\r\n        prop = { size: 'sm' };\r\n      }\r\n      if (!buttons) {\r\n        buttons = {\r\n          primary : 'Yes',\r\n          secondary : 'No'\r\n        };\r\n      }\r\n      const modalRef = this.modalService.open(ModalPopupComponent, prop);\r\n      modalRef.componentInstance.type = 'confirm';\r\n      modalRef.componentInstance.modalheader = header;\r\n      modalRef.componentInstance.message = message;\r\n      modalRef.componentInstance.buttons = buttons;\r\n      return modalRef.componentInstance.saveModalData;\r\n      /* modalRef.componentInstance.saveModalData.subscribe((receivedData: any) => {\r\n        methods.save(receivedData);\r\n      }); */\r\n  }\r\n}\r\n"],"sourceRoot":""}